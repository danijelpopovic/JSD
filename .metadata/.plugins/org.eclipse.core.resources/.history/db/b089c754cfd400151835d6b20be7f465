package editor.utils;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;



public class SuggestionPanel {
    private JList list;
    private JPopupMenu popupMenu;
    private String subWord;
    private final int insertionPosition;
    public SuggestionPanel suggestion;
	public JTextPane txtpnEditor;

    public SuggestionPanel(JTextPane txtpnEditor, int position, String subWord, Point location) {
        this.insertionPosition = position;
        this.subWord = subWord;
        popupMenu = new JPopupMenu();
        popupMenu.removeAll();
        popupMenu.setOpaque(false);
        popupMenu.setBorder(null);
        popupMenu.add(list = createSuggestionList(position, subWord), BorderLayout.CENTER);
        popupMenu.show(txtpnEditor, location.x, txtpnEditor.getBaseline(0, 0) + location.y+10);
        this.txtpnEditor=txtpnEditor;
    }

    public void hide() {
        popupMenu.setVisible(false);
        if (suggestion == this) {
            suggestion = null;
        }
    }
    
    
    

    private JList createSuggestionList(final int position, final String subWord) {
    	
    	ArrayList<String> reservedWords = new ArrayList<String>();
    	reservedWords.add("City: ");
    	reservedWords.add("cc: ");
    	reservedWords.add("cC1dd: ");
    	reservedWords.add("Arena: ");
    	reservedWords.add("Date: ");
    	reservedWords.add("Time: ");
    	reservedWords.add("Attendance: ");
    	reservedWords.add("First name: ");
    	reservedWords.add("Last name: ");
    	
    	//reservedWords.get(0).contains(s)
    	
        Object[] data = new Object[10];
        int counter=0;
        for(String s: reservedWords){
        	String reserved = s;
        	if(reserved.toLowerCase().contains(subWord.toLowerCase())){
        		data[counter]=s;
        		System.out.println(s);
        		counter++;
        	}
        }
        
        
        /*for (int i = 0; i < data.length; i++) {
            data[i] = subWord + i+"test";
        }*/
        JList list = new JList(data);
        list.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
            	//autocomplete after step
            	System.out.println(e);
                if (e.getClickCount() == 2) {
                    insertSelection();
                }
            }
        });
        return list;
    }

    public boolean insertSelection() {
        if (list.getSelectedValue() != null) {
            try {
                final String selectedSuggestion = ((String) list.getSelectedValue()).substring(subWord.length());
                
                
               /* StyleContext context = new StyleContext();
                Style style = context.addStyle("test", null);
             // set some style properties
                StyleConstants.setForeground(style, Color.BLUE);*/
               //txtpnEditor.getDocument().remove(subWord.length()-1, subWord.length());
                txtpnEditor.getDocument().insertString(insertionPosition, selectedSuggestion, null);
                
                return true;
            } catch (BadLocationException e1) {
                e1.printStackTrace();
            }
            //hideSuggestion();
        }
        return false;
    }

    public void moveUp() {
        int index = Math.min(list.getSelectedIndex() - 1, 0);
        selectIndex(index);
    }

    public void moveDown() {
        int index = Math.min(list.getSelectedIndex() + 1, list.getModel().getSize() - 1);
        selectIndex(index);
    }

    private void selectIndex(int index) {
        final int position = txtpnEditor.getCaretPosition();
        list.setSelectedIndex(index);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            	txtpnEditor.setCaretPosition(position);
            };
        });
    }
}