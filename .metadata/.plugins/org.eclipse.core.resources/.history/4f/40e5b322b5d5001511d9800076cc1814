package editor.view;


import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;

import net.miginfocom.swing.MigLayout;
import editor.utils.Autocomplete;
import editor.utils.MyKeyListener;


public class EditorFrame extends JFrame{

	private static final long serialVersionUID = 1L;
	private JTextPane txtpnEditor;
	private static EditorFrame instance = null;
	public static int init = 0;
	public List<String> pressedCharacter = new ArrayList<String>();
	
	public static EditorFrame getInstance() {
		if (init == 0) {
			instance = new EditorFrame();
			init = 1;			
			return instance;
		}
		return instance;
	}
	
	public EditorFrame() {
		initGUI();
	}
	private static final String COMMIT_ACTION = "commit";
		
		
	
	public void initGUI(){
		this.setTitle("Editor");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		getContentPane().setLayout(new MigLayout("", "[][grow]", "[][][][][grow][]"));
		JPanel panel = new JPanel();
		panel.setBackground(Color.DARK_GRAY);
		getContentPane().add(panel, "cell 1 4,grow");
		panel.setLayout(new MigLayout("", "[grow]", "[grow]"));
		
		
		DefaultStyledDocument doc = new DefaultStyledDocument() {
            public void insertString (int offset, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offset, str, a);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                if (before < 0) before = 0;
                int after = findFirstNonWordChar(text, offset + str.length());
                int wordL = before;
                int wordR = before;

                while (wordR <= after) {
                    if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
                        if (text.substring(wordL, wordR).matches("(\\W)*(City: |First name: |Last name: )"))
                            setCharacterAttributes(wordL, wordR - wordL, attr, false);
                        else
                            setCharacterAttributes(wordL, wordR - wordL, attrBlack, false);
                        wordL = wordR;
                    }
                    wordR++;
                }
            }

            public void remove (int offs, int len) throws BadLocationException {
                super.remove(offs, len);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                if (before < 0) before = 0;
                int after = findFirstNonWordChar(text, offs);

                if (text.substring(before, after).matches("(\\W)*(private|public|protected)")) {
                    setCharacterAttributes(before, after - before, attr, false);
                } else {
                    setCharacterAttributes(before, after - before, attrBlack, false);
                }
            }
        };
		
		
		txtpnEditor = new JTextPane();
		txtpnEditor.setBackground(Color.BLACK);
		txtpnEditor.setForeground(Color.WHITE);
		txtpnEditor.setFont(new Font("Consolas", Font.BOLD, 12));
		// Our words to complete
		List<String> keywords  = new ArrayList<String>(10);
		
		
		try {
			FileInputStream fstream = new FileInputStream("resources/reserved_words.txt");
			BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

			String strLine;

			//Read File Line By Line
			while ((strLine = br.readLine()) != null)   {
			  if(!strLine.isEmpty() && strLine!="")
				  keywords.add(strLine);
			}

			//Close the input stream
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	    
		Autocomplete autoComplete = new Autocomplete(txtpnEditor, keywords);
		txtpnEditor.getDocument().addDocumentListener(autoComplete);

		txtpnEditor.getInputMap().put(KeyStroke.getKeyStroke("TAB"), COMMIT_ACTION);
		txtpnEditor.getActionMap().put(COMMIT_ACTION, autoComplete.new CommitAction());
		txtpnEditor.addKeyListener(new MyKeyListener(txtpnEditor));
		
		JScrollPane scrollPane = new JScrollPane(txtpnEditor);
		scrollPane.setBackground(Color.DARK_GRAY);
		TextLineNumber tln = new TextLineNumber(txtpnEditor); 
		
		scrollPane.setRowHeaderView( tln );
		panel.add(scrollPane, "flowx,cell 0 0,grow");
		JButton btnSave = new JButton("Save");
		getContentPane().add(btnSave, "cell 1 5,alignx right");
		pack();
		setSize(900,600);
		this.setLocationRelativeTo(null);
		this.setForeground(Color.DARK_GRAY);
		getContentPane().setBackground(Color.DARK_GRAY); 
	}

}
