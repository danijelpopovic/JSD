package editor.view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;

import net.miginfocom.swing.MigLayout;

import javax.swing.BorderFactory;
import javax.swing.JButton;

import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;


public class EditorFrame extends JFrame{

	private static final long serialVersionUID = 1L;
	private JTextPane txtpnEditor;
	private static EditorFrame instance = null;
	public static int init = 0;
	private SuggestionPanel suggestion;
	
	public static EditorFrame getInstance() {
		if (init == 0) {
			instance = new EditorFrame();
			init = 1;			
			return instance;
		}
		return instance;
	}
	
	public EditorFrame() {
		initGUI();
	}
		
	public void initGUI(){
		this.setTitle("Editor");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		getContentPane().setLayout(new MigLayout("", "[grow]", "[grow][]"));
		JPanel panel = new JPanel();
		
		getContentPane().add(panel, "cell 0 0,grow");
		panel.setLayout(new MigLayout("", "[grow]", "[grow]"));
		
		txtpnEditor = new JTextPane();
		
		txtpnEditor.addKeyListener(new KeyListener() {

			@Override
			public void keyTyped(KeyEvent e) {
				 if (e.getKeyChar() == KeyEvent.VK_ENTER) {
	                    if (suggestion != null) {
	                        if (suggestion.insertSelection()) {
	                            e.consume();
	                            final int position = txtpnEditor.getCaretPosition();
	                            SwingUtilities.invokeLater(new Runnable() {
	                                @Override
	                                public void run() {
	                                    try {
	                                    	txtpnEditor.getDocument().remove(position - 1, 1);
	                                    } catch (BadLocationException e) {
	                                        e.printStackTrace();
	                                    }
	                                }
	                            });
	                        }
	                    }
	                }				
			}

			@Override
			public void keyPressed(KeyEvent e) {
				
			}

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				if (e.getKeyCode() == KeyEvent.VK_DOWN && suggestion != null) {
                    suggestion.moveDown();
                } else if (e.getKeyCode() == KeyEvent.VK_UP && suggestion != null) {
                    suggestion.moveUp();
                } else if (Character.isLetterOrDigit(e.getKeyChar())) {
                    showSuggestionLater();
                } else if (Character.isWhitespace(e.getKeyChar())) {
                    hideSuggestion();
                }
			}	            
		});
		
		JScrollPane scrollPane = new JScrollPane(txtpnEditor);
		TextLineNumber tln = new TextLineNumber(txtpnEditor); 
		
		scrollPane.setRowHeaderView( tln );
		panel.add(scrollPane, "flowx,cell 0 0,grow");
		
		JButton btnSave = new JButton("Save");
		getContentPane().add(btnSave, "cell 0 1,alignx right");
		pack();
		setSize(900,600);
		this.setLocationRelativeTo(null);
	}
	
	
	
	
	
	/*        ------------------------      */
	
	 

    protected void showSuggestionLater() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                showSuggestion();
            }

        });
    }

    protected void showSuggestion() {
        hideSuggestion();
        final int position = txtpnEditor.getCaretPosition();
        Point location;
        try {
            location = txtpnEditor.modelToView(position).getLocation();
        } catch (BadLocationException e2) {
            e2.printStackTrace();
            return;
        }
        String text = txtpnEditor.getText();
        int start = Math.max(0, position - 1);
        while (start > 0) {
            if (!Character.isWhitespace(text.charAt(start))) {
                start--;
            } else {
                start++;
                break;
            }
        }
        if (start > position) {
            return;
        }
        final String subWord = text.substring(start, position);
        if (subWord.length() < 2) {
            return;
        }
        suggestion = new SuggestionPanel(txtpnEditor, position, subWord, location);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            	txtpnEditor.requestFocusInWindow();
            }
        });
    }

    private void hideSuggestion() {
        if (suggestion != null) {
            suggestion.hide();
        }
    }
	
	
	public class SuggestionPanel {
        private JList list;
        private JPopupMenu popupMenu;
        private String subWord;
        private final int insertionPosition;

        public SuggestionPanel(JTextPane txtpnEditor, int position, String subWord, Point location) {
            this.insertionPosition = position;
            this.subWord = subWord;
            popupMenu = new JPopupMenu();
            popupMenu.removeAll();
            popupMenu.setOpaque(false);
            popupMenu.setBorder(null);
            popupMenu.add(list = createSuggestionList(position, subWord), BorderLayout.CENTER);
            popupMenu.show(txtpnEditor, location.x, txtpnEditor.getBaseline(0, 0) + location.y);
        }

        public void hide() {
            popupMenu.setVisible(false);
            if (suggestion == this) {
                suggestion = null;
            }
        }
        
        
        

        private JList createSuggestionList(final int position, final String subWord) {
        	
        	ArrayList<String> reservedWords = new ArrayList<String>();
        	reservedWords.add("City: ");
        	reservedWords.add("cc: ");
        	reservedWords.add("cC1dd: ");
        	reservedWords.add("Arena: ");
        	reservedWords.add("Date: ");
        	reservedWords.add("Time: ");
        	reservedWords.add("Attendance: ");
        	
        	//reservedWords.get(0).contains(s)
        	
            Object[] data = new Object[10];
            int counter=0;
            for(String s: reservedWords){
            	String reserved = s;
            	if(reserved.toLowerCase().contains(subWord.toLowerCase())){
            		data[counter]=s;
            		System.out.println(s);
            		counter++;
            	}
            }
            
            
            /*for (int i = 0; i < data.length; i++) {
                data[i] = subWord + i+"test";
            }*/
            JList list = new JList(data);
            list.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
            list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            list.setSelectedIndex(0);
            list.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                	//autocomplete after step
                    if (e.getClickCount() == 0) {
                        insertSelection();
                    }
                }
            });
            return list;
        }

        public boolean insertSelection() {
            if (list.getSelectedValue() != null) {
                try {
                    final String selectedSuggestion = ((String) list.getSelectedValue());//.substring(subWord.length());
                    txtpnEditor.getDocument().insertString(insertionPosition, selectedSuggestion, null);
                    return true;
                } catch (BadLocationException e1) {
                    e1.printStackTrace();
                }
                hideSuggestion();
            }
            return false;
        }

        public void moveUp() {
            int index = Math.min(list.getSelectedIndex() - 1, 0);
            selectIndex(index);
        }

        public void moveDown() {
            int index = Math.min(list.getSelectedIndex() + 1, list.getModel().getSize() - 1);
            selectIndex(index);
        }

        private void selectIndex(int index) {
            final int position = txtpnEditor.getCaretPosition();
            list.setSelectedIndex(index);
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	txtpnEditor.setCaretPosition(position);
                };
            });
        }
    }

   
	
	
}
